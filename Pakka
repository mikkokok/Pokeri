package pokeri;

import java.util.Collections;
import java.util.LinkedList;

/**
 * @author Mikko Kokkonen, 2014
 * @version 0.1 Pakka luokka jonka sisällä on kortti luokka Pakka kuvastaa
 *          korttipakkaa
 */
public class Pakka {
	private static Pakka instance = null;
	/**
	 * Staattinen enum "Maa" joka sisältää korttien maat
	 */

	// Esiintymämuuttuja

	/**
	 * Dynaaminen Pakka josta kortit jaetaan.
	 */
	private LinkedList<Kortti> valmisPakka = new LinkedList<Kortti>();
	/**
	 * Luokkamuuttuja Staattinen 52 kortin pakka, joka luodaan käännösvaiheessa
	 */
	static private LinkedList<Kortti> staticpakka = new LinkedList<Kortti>();
	{

		{
			for (int i = 1; i < 14; i++) {
				staticpakka.add(new Kortti(Maa.HERTTA, Numero.get(i)));
				staticpakka.add(new Kortti(Maa.PATA, Numero.get(i)));
				staticpakka.add(new Kortti(Maa.RISTI, Numero.get(i)));
				staticpakka.add(new Kortti(Maa.RUUTU, Numero.get(i)));
			}
		}
	};

	// --Staticpakka--

	// Konstruktorit

	/**
	 * Konstruktori jolla luodaan 52 kortin pakkaolio.
	 * 
	 */
	private Pakka() {
		for (int i = 0; i < 52; i++) {
			valmisPakka.add(staticpakka.get(i));
		}
		//Collections.shuffle(valmisPakka);
		System.out.println("Pakan koko " + valmisPakka.size());
		// System.err.println(valmisPakka);
	}

	// Havainnointimetodit

	/**
	 * Metodi jolla palautetaan kortti pakkaan. Alkuehto: Pakka pitää olla
	 * luotuna.
	 * 
	 * @param palautettava
	 */

	public void giveKortti(Kortti palautettava) {
		valmisPakka.addLast(palautettava);
	}

	/**
	 * getKortti metodi antaa pakasta päällimmäisen kortin Alkuehto: Pakka pitää
	 * olla luotuna.
	 * 
	 * @return
	 */
	public Kortti getKortti() {
		return valmisPakka.removeFirst();

	}

	/**
	 * Metodi jolla voidaan lukea pakka.
	 */
	public void luePakka() {
		int i=1;
		for (Pakka.Kortti c : valmisPakka ) {
			System.out.println(i+". kortti on " +c);
			i++;
		}

	}

	// Muutosmetodit

	/**
	 * Metodi jolla pakka luetaan dynaamiseen listaan ja sekoitetaan
	 * 
	 */
	public static Pakka annaPakka() {
		if (instance == null) {
			instance = new Pakka();
		}
		return instance;
	}
	public void sekoitaPakka() {
		Collections.shuffle(valmisPakka);
	}


	/**
	 * Metodi jolla voidaan pyytää tietty kortti pakasta. Alkuehto: Pakka pitää
	 * olla luotuna.
	 * 
	 * @param numero
	 * @param maa
	 * @return
	 */
	public Pakka.Kortti getTiettyKortti(Numero numero, Maa maa) {
		for (Pakka.Kortti c : valmisPakka) {
			if (numero==c.numero && maa==c.maa) {
				return c;
			}
		}
		return null;
	}

	/**
	 * Kortti classi jolla kortit luodaan
	 */
	static public class Kortti {
		private Maa maa;
		private Numero numero;

		// Konstruktori
		/**
		 * Classin konstruktori
		 * @param maa
		 * @param numero
		 */
		public Kortti(Maa maa, Numero numero) {
			this.maa = maa;
			this.numero = numero;
		}

		/* toString metodi
		 */
		public String toString() {
			return this.maa.toString() + " " + this.numero.toString();
		}
		public int getMinLuku() {
			return this.numero.getMinluku();
		}
		public int getMaxLuku() {
			return this.numero.getMaxluku();
		}

		// Luokkamuuttujat

	} // Kortti class
} // Pakka class
