package pokeri;

import java.util.Collections;
import java.util.LinkedList;

	/**
 	* @author Mikko Kokkonen, 2014
 	* @version 0.1
 	* Pakka luokka jonka sisällä on kortti luokka
 	* Pakka kuvastaa korttipakkaa
 	*/
	public class Pakka {
		/** 
		 * Staattinen enum "Maa" joka sisältää korttien maat
		 */
		
	 // Esiintymämuuttuja
		
	/**	
	 * Dynaaminen Pakka josta kortit jaetaan.
	 */
	private LinkedList<Kortti> valmisPakka = null;
	/** Luokkamuuttuja
	 *  Staattinen 52 kortin pakka, joka luodaan käännösvaiheessa
	 */
	@SuppressWarnings("serial")
	static private LinkedList<Kortti> staticpakka = new LinkedList<Kortti> ()  { 
		{
		for (int i=1;i<14;i++) {
			add(new Kortti(Kortti.Maa.HERTTA, Kortti.Numero.get(i)));
			add(new Kortti(Kortti.Maa.PATA, Kortti.Numero.get(i)));
			add(new Kortti(Kortti.Maa.RISTI, Kortti.Numero.get(i)));
			add(new Kortti(Kortti.Maa.RUUTU, Kortti.Numero.get(i)));
		}
		}
	};
	// --Staticpakka--
	
	// Konstruktorit
	
	/** Konstruktori jolla luodaan 52 kortin pakkaolio.
	 * 
	 */
	public Pakka() {
	for (int i=0; i<52;i++) {
		valmisPakka.add(staticpakka.get(i));
	}
	Collections.shuffle(valmisPakka);
	}
	
	 // Havainnointimetodit

	/** Metodi jolla palautetaan kortti pakkaan.
	 * Alkuehto: Pakka pitää olla luotuna.
	 * @param palautettava
	 */

	public void giveKortti(Kortti palautettava) {
	valmisPakka.addLast(palautettava);
	}
	
	/** getKortti metodi antaa pakasta päällimmäisen kortin
	 * Alkuehto: Pakka pitää olla luotuna.
	 * @return
	 */
	public Kortti getKortti() {
		return valmisPakka.removeFirst();
		
	}
	/** 
	 * Metodi jolla voidaan lukea pakka.
	 */
	public String toString() {
		String palautettava;
		return null;
		

	}

	 // Muutosmetodit

	/** Metodi jolla pakka luetaan dynaamiseen listaan ja sekoitetaan
	 * 
	 */
	public void teePakka() {
		if (valmisPakka==null) {
			new Pakka();
		} 

	}
	/** Metodi jolla voidaan pyytää tietty kortti pakasta.
	 * Alkuehto: Pakka pitää olla luotuna.
	 * @param numero
	 * @param maa
	 * @return
	 */
	public Kortti getTiettyKortti(Kortti.Numero numero, Kortti.Maa maa) {
		return null;
	}

	/** 
	 * Kortti classi jolla kortit luodaan
	 */
	static public class Kortti {
			// Konstruktorit	


		public static enum Maa {
			RISTI("♣"),
			RUUTU("♦"),
			HERTTA("♥"),
			PATA("♠");
			private final String maa;
			private String getMaa() {
				return this.maa;
			}

			Maa(String maa) {
				this.maa=maa;
			}
		}		
		/**
		 * Staattinen enum "Numero" joka sisältää korttien numerot
		 */
		public static enum Numero {
			ASSA (1, 14),
			KAKSI (2, 2),
			KOLME (3, 3),
			NELJA (4, 4),
			VIISI (5, 5),
			KUUSI (6, 6),
			SEITSEMAN (7, 7),
			KAHDEKSAN (8, 8),
			YHDEKSAN (9, 9),
			KYMMENEN (10, 10),
			JATKA (11, 11),
			KUNINGATAR (12, 12),
			KUNKKU (13, 13);
			
			private final int minluku;
			private final int maxluku;
			
			/** Konstruktori enumille jolla saadaan korteille oikeat numerot.
			 * @param minluku
			 * @param maxluku
			 */
			Numero(int minluku, int maxluku) {
				this.minluku=minluku;  
				this.maxluku=maxluku;
			}
			public int getMinluku() {
				return minluku;
			}

			public int getMaxluku() {
				return maxluku;
			}
			private static Numero get(int i) {
				for (Numero c: Numero.values()) {
					if (c.minluku==i) {
						return c;
					}
				}
				return null;
			}
		}
		/** Classin konstruktori
		 * @param maa
		 * @param numero
		 */
			public Kortti(Maa maa, Numero numero) {
				
			}
		
		// Luokkamuuttujat
		
	} // Kortti class
	} // Pakka class
